---
title: "Fit example models"
author: "Max Lindmark"
date: today
date-format: iso
toc: true
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 100%
editor: source
---

```{r load libraries}
#| message: false
#| warning: false

# Load libraries
library(tidyverse)
library(tidylog)
library(sdmTMB)
library(patchwork)
library(viridis)
library(RColorBrewer)
library(ggsidekick); theme_set(theme_sleek())

home <- here::here()
# source_url("https://raw.githubusercontent.com/maxlindmark/cod-interactions/main/R/functions/map-plot.R")
source(paste0(home, "/R/functions/map-plot.R"))
```

Read data and prediction grid, scales variables

```{r data}
# Read data
d <- readr::read_csv(paste0(home, "/data/clean/larval_size.csv")) %>% 
  drop_na(temp) %>% 
  mutate(temp_sc = (temp - mean(temp, na.rm = TRUE)) / sd(temp, na.rm = TRUE),
         yday_ct = yday - mean(yday),
         year_f = as.factor(year))

nrow(d)

pred_grid <- readr::read_csv(paste0(home, "/data/clean/pred_grid.csv")) %>% 
  drop_na(temp) %>% 
  mutate(temp_sc = (temp - mean(d$temp, na.rm = TRUE)) / sd(d$temp, na.rm = TRUE),
         year_f = as.factor(year),
         yday_ct = 0)
```

### Fit example model

```{r}
pred_grid_list <- list()
coef_list <- list()
res_list <- list()
cond_list <- list()

for(i in unique(d$species)) {  
    
    dd <- d %>% filter(species == i)
    
    mesh <- make_mesh(dd,
                      xy_cols = c("X", "Y"),
                      cutoff = 5)
    
    print(
    ggplot() +
      inlabru::gg(mesh$mesh) +
      coord_fixed() +
      geom_point(aes(X, Y), data = dd, alpha = 0.2, size = 0.5) +
      annotate("text", -Inf, Inf, label = paste("n knots = ", mesh$mesh$n), hjust = -0.1, vjust = 2) + 
      labs(x = "Easting (km)", y = "Northing (km)", title = str_to_sentence(str_replace(i, "_", " ")))
    )
 
    # TODO: Time-varying intercept (rw or ar1) to fill in gaps with ar1?
    # TODO: Anisotrophy might be warranted here
    # TODO: Spatiotemporal?
    # TODO: Spatially varying NAO?
    # TODO: R2 for temperature (write a functions)
    
    if(unique(!dd$species %in% c("Maurolicus muelleri",
                                 "Anguilla anguilla",
                                 "Agonus cataphractus",
                                 "Syngnathus rostellatus",
                                 "Enchelyopus cimbrius"))) {
      
    m <- sdmTMB(length_mm ~ 0 + year_f + temp_sc + yday_ct,
                data = dd,
                mesh = mesh,
                family = student(df = 8),
                spatiotemporal = "off",
                spatial = "on",
                time = "year")  
    
    # Residuals
    samps <- sdmTMBextra::predict_mle_mcmc(m, mcmc_iter = 201, mcmc_warmup = 200)
    dd$mcmc_res <- as.vector(residuals(m, type = "mle-mcmc", mcmc_samples = samps))
      
    } else {
      
    m <- sdmTMB(length_mm ~ 0 + year_f + temp_sc + yday_ct,
                data = dd,
                family = student(df = 8),
                spatiotemporal = "off",
                spatial = "off",
                time = "year")  
      
    # Residuals
    # FIXME: why doesn't MCMC residuals work without spatial models?
    dd$mcmc_res <- residuals(m)
    
    }
    
    print(i)
    m
    sanity(m)
    
  
    res_list[[i]] <- dd %>% mutate(species = i)
    
    # Gridded predictions
    pred <- predict(m, newdata = pred_grid %>% filter(year %in% unique(dd$year)))
    
    pred_grid_list[[i]] <- pred %>% mutate(species = i)

    # Coefficients
    coef_list[[i]] <- tidy(m, conf.int = TRUE) %>%
      filter(term %in% c("temp_sc", "yday_ct")) %>% 
      mutate(species = i)
    
    # Conditional predictions
    nd <- tibble(year = unique(dd$year)) %>% 
      mutate(year_f = as.factor(year), 
             yday_ct = 0, 
             temp_sc = 0)
    
    pred_c <- predict(m, newdata = nd, se_fit = TRUE,
                      re_form = NA, re_form_iid = NA)

    cond_list[[i]] <- pred_c %>% mutate(species = i)
    
}

# Save predictions and sims as data frames
res_df <- dplyr::bind_rows(res_list)
pred_grid_df <- dplyr::bind_rows(pred_grid_list)
coef_df <- dplyr::bind_rows(coef_list)
cond_df <- dplyr::bind_rows(cond_list)
```

## Save

```{r}
#| message: false
#| warning: false

write_csv(res_df, paste0(home, "/output/res_df.csv"))
write_csv(pred_grid_df, paste0(home, "/output/pred_grid_df.csv"))
write_csv(coef_df, paste0(home, "/output/coef_df.csv"))
write_csv(cond_df, paste0(home, "/output/cond_df.csv"))
```

## Plot output

```{r}
#| message: false
#| warning: false

res_df <- read_csv(paste0(home, "/output/res_df.csv"))
pred_grid_df <- read_csv(paste0(home, "/output/pred_grid_df.csv"))
coef_df <- read_csv(paste0(home, "/output/coef_df.csv"))
cond_df <- read_csv(paste0(home, "/output/cond_df.csv"))
```

### Residuals

```{r}
#| message: false
#| warning: false

res_df %>% 
  ggplot(aes(sample = mcmc_res)) +
  stat_qq(size = 0.75, shape = 21, fill = NA) +
  facet_wrap(~species) +
  stat_qq_line() +
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles") +
  theme(aspect.ratio = 1)

ggsave(paste0(home, "/figures/residuals.pdf"), width = 17, height = 17, units = "cm")
```

### Coefficients

```{r}
#| message: false
#| warning: false

pal <- brewer.pal(n = 6, name = "Paired")[c(2, 6)]

coef_df %>% 
  filter(term == "temp_sc") %>% 
  mutate(sign = ifelse(estimate > 0, "pos", "neg"),
         sig = ifelse(estimate > 0 & conf.low > 0, "sig", "not sig"),
         sig = ifelse(estimate < 0 & conf.high < 0, "sig", sig)) %>% 
  ggplot(aes(estimate, reorder(species, estimate), fill = sig, color = sign, shape = sig)) + 
  geom_point(fill = NA) + 
  scale_shape_manual(values = c(21, 19)) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), 
                width = 0, alpha = 0.3) + 
  geom_vline(xintercept = 0, alpha = 0.3, linetype = 2) +
  theme(axis.text.y = element_text(face = "italic")) + 
  labs(y = "Species", x = "Effect of temperature") + 
  scale_color_manual(values = pal) + 
  scale_fill_manual(values = pal) +
  guides(color = "none", shape = "none") +
  theme(legend.position = "bottom")

ggsave(paste0(home, "/figures/temp_coef.pdf"), width = 17, height = 8, units = "cm")
```

### Trends

```{r}
#| message: false
#| warning: false

ggplot(cond_df, aes(year, est)) + 
  geom_point(size = 0.8) +
  geom_errorbar(aes(ymin = est - 1.96*est_se,
                    ymax = est + 1.96*est_se),
                width = 0, alpha = 0.3) +
  theme_facet_map(base_size = 8) +
  labs(y = "Predicted length (mm)", x = "Year") + 
  facet_wrap(~species, ncol = 5, scales = "free")

ggsave(paste0(home, "/figures/trends.pdf"), width = 17, height = 15, units = "cm")


# Standardized trends 
cond_df %>% 
  mutate(est_z = (est - mean(est)) / sd(est), .by = species) %>% 
  ggplot(aes(year, est_z, color = species)) + 
  geom_line() +
  geom_smooth(aes(year, est_z), inherit.aes = FALSE, se = FALSE, 
              color = pal[2]) +
  scale_color_viridis(discrete = TRUE, name = "") + 
  labs(y = "z-scored predicted size", x = "Year") + 
  guides(color = guide_legend(ncol = 4)) + 
  theme(legend.position = "bottom",
        legend.key.size = unit(0.2, "cm")) +
  NULL

ggsave(paste0(home, "/figures/z_trends.pdf"), width = 17, height = 17, units = "cm")
```

### Random fields

```{r}
#| message: false
#| warning: false

pred_grid_df_sub <- pred_grid_df %>% 
  group_by(species) %>% 
  filter(year == max(year))

plot_map_fc +
  geom_raster(data = pred_grid_df_sub %>% drop_na(omega_s),
              aes(X*1000, Y*1000, fill = omega_s)) +
  scale_fill_gradient2() + 
  theme_facet_map(base_size = 8) +
  facet_wrap(~species, ncol = 4)

ggsave(paste0(home, "/figures/omega.pdf"), width = 17, height = 15, units = "cm")
```

### Spatial predictions
For all years

```{r}
#| message: false
#| warning: false

# Z- score sizes by species to plot on the same plot

plot_map_fc +
  geom_raster(data = pred_grid_df %>% 
                drop_na(omega_s) %>% # Drop the species without spatial effects
                mutate(est_z = (est - mean(est)) / sd(est), .by = "species"), 
              aes(X*1000, Y*1000, fill = est_z)) +
  scale_fill_viridis() + 
  theme_facet_map(base_size = 8) +
  facet_wrap(~species, ncol = 4)

ggsave(paste0(home, "/figures/spatial_pred.pdf"), width = 17, height = 15, units = "cm")
```
