---
title: "Fit length models"
author: "Max Lindmark"
date: today
date-format: iso
toc: true
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 100%
editor: source
---

```{r load libraries}
#| message: false
#| warning: false

# Load libraries
library(tidyverse)
library(tidylog)
library(sdmTMB)
library(patchwork)
library(viridis)
library(RColorBrewer)
library(modelr)
library(ggstats)
library(ggspatial)
library(ggsidekick)
theme_set(theme_sleek())

home <- here::here()
source(paste0(home, "/R/functions/map-plot.R"))

remove_attributes <- function(x) {attributes(x) <- NULL; return(x)}
```

Read data and prediction grid, scale variables

```{r data}
#| message: false
# Read data
d <- readr::read_csv(paste0(home, "/data/clean/larval_size.csv")) |>
  drop_na(temp) |>
  drop_na(chl) |>
  mutate(
    yday_ct = yday - mean(yday),
    year_f = as.factor(year),
    species_f = as.factor(species),
    year_ct = year - median(year)
  ) |>
  mutate(across(
    .cols = c("temp", "chl"),
    .fns = scale,
    .names = "{.col}_sc"
  )) |> 
  mutate(temp_sq = temp_sc*temp_sc) |> 
  filter(!species == "Anguilla anguilla") |> 
  filter(!species == "Sardina pilchardus") |> 
  as.data.frame() |> 
  mutate(across(everything(), as.vector))

#d <- lapply(d, remove_attributes)

# Load prediction grid
pred_grid <- readr::read_csv(paste0(home, "/data/clean/pred_grid.csv")) |>
  drop_na(temp) |>
  drop_na(chl) |>
  filter(year %in% unique(d$year)) |>
  mutate(
    temp_sc = (temp - mean(d$temp, na.rm = TRUE)) / sd(d$temp, na.rm = TRUE),
    temp_sq = temp_sc*temp_sc,
    chl_sc = (chl - mean(chl, na.rm = TRUE)) / sd(chl, na.rm = TRUE),
    depth_sc = as.numeric(scale(depth)),
    year_f = as.factor(year),
    year_ct = 0,
    yday_ct = 0
  ) |>
  mutate(keep = ifelse(lon < 10 & lat < 57.15, "N", "Y")) |>
  filter(keep == "Y") |>
  dplyr::select(-keep)

# Read density data
b <- readr::read_csv(paste0(home, "/data/clean/larval_density.csv")) |>
  drop_na(no_m2) |> 
  mutate(year_f  = as.factor(year),
         depth_sc = (depth - mean(pred_grid$depth, na.rm = TRUE))/sd(pred_grid$depth, na.rm = TRUE)) |> 
  mutate(sum_no_m2 = sum(no_m2), .by = c(year, species)) |> 
  filter(sum_no_m2 > 0)

length(unique(b$haul_id))
```

Plot covariates

```{r}
coul <- brewer.pal(11, "Spectral")
coul <- colorRampPalette(coul)(length(unique(d$species)))

d <- d |> 
  mutate(species2 = fct_recode(species,
                               "A. cataphractus" = "Agonus cataphractus",
                               "A. minuta" = "Aphia minuta",
                               "C. ascanii" = "Chirolophis ascanii",
                               "C. harengus" = "Clupea harengus",
                               "C. linearis" = "Crystallogobius linearis",
                               "M. kitt" = "Microstomus kitt",
                               "M. scorpius" = "Myoxocephalus scorpius",
                               "P. gunnellus" = "Pholis gunnellus",
                               "S. rostellatus" = "Syngnathus rostellatus"))

size_plot <- ggplot(d, aes(length_mm, fill = species2)) +
  geom_histogram() +
  scale_fill_manual(values = coul, name = "Species") +
  coord_cartesian(expand = 0) +
  labs(y = "Count", x = "Length (mm)", tag = "b)") +
  theme(legend.position = "bottom",
        legend.key.size = unit(0.25, "cm"),
        legend.spacing.y = unit(0, "pt"),
        legend.margin = margin(0, 0, 0, 0),
        legend.title = element_blank(),
        legend.text = element_text(face = "italic", size = 7),
        ) +
  guides(fill = guide_legend(ncol = 3)) + 
  scale_x_continuous(trans = "sqrt")

# First gather the elements common to all the covariate plots
covMapTheme <- plot_map +
  theme(
    legend.position.inside = c(0.25, 0.11),
    legend.direction = "horizontal",
    legend.key.width = unit(0.35, "cm"), # Decreased to fit multicovariates
    legend.key.height = unit(0.2, "cm"),
    legend.text = element_text(size = 7),
    legend.title = element_text(size = 8),
    plot.tag = element_text()
  ) +
  geom_sf() +
  annotate("text",
    label = "Sweden", x = xmin2 + 0.95 * xrange, y = ymin2 + 0.75 * yrange,
    color = "gray50", size = 2.5
  ) +
  annotate("text",
    label = "Norway", x = xmin2 + 0.08 * xrange, y = ymin2 + 0.95 * yrange,
    color = "gray50", size = 2.5
  ) +
  annotate("text",
    label = "Denmark", x = xmin2 + 0.42 * xrange, y = ymin2 + 0.45 * yrange,
    color = "gray50", size = 2.5
  ) +
  guides(fill = guide_colorbar(
    position = "inside",
    title.position = "top",
    title.hjust = 0.5
  )) +
  NULL

# Generate the data and covariate maps
p_dat <- covMapTheme +
  geom_point(
    data = d, aes(X * 1000, Y * 1000, color = species2),
    size = 0.5, alpha = 1
  ) +
  scale_color_manual(values = coul, name = "Species") +
  guides(color = "none") +
  labs(tag = "a)") +
  annotation_scale(bar_cols = c("grey30", "white"), height = unit(0.1, "cm")) +
  annotation_north_arrow(
    location = "tr", which_north = "true", height = unit(0.85, "cm"),
    width = unit(0.85, "cm"), pad_x = unit(0.1, "in"), pad_y = unit(0.1, "in"),
    style = north_arrow_fancy_orienteering(
      fill = c("grey40", "white"),
      line_col = "grey20"
    )
  )

p_dat | free(size_plot)

# Save
ggsave(paste0(home, "/figures/data_plot.pdf"), width = 17, height = 11, units = "cm")


# Plot covariates
# For batyhymetry
pred_grid_depth <-
  bind_rows(
    read_csv(paste0(home, "/data/clean/pred_grid.csv"))
  ) |>
  filter(year == 1999) |>
  mutate(depth = round(depth)) |>
  distinct(X, Y, depth) |>
  summarise(depth = mean(depth), .by = c(X, Y))

# For labels
skag_kat_border <- data.frame(lat1 = 57.75420, 
                              lat2 = 57.91694673025835,
                              lon1 = 10.61630,
                              lon2 = 11.502651981474733) 

skag_kat_border <- skag_kat_border |> 
  add_utm_columns(utm_names = c("X1", "Y1"),
                  ll_names = c("lon1", "lat1")) |> 
  add_utm_columns(utm_names = c("X2", "Y2"),
                  ll_names = c("lon2", "lat2"))


ann_text <- data.frame(year = 2012, 
                       label = c("Skagerrak", "Kattegat"),
                       lon = c(10.55, 11.2),
                       lat = c(58.1, 57.5)) |> 
  add_utm_columns(ll_names = c("lon", "lat"))


p_tempCovMap <- covMapTheme +
  geom_raster(
    data = pred_grid |>
      group_by(X, Y) |>
      summarise(mean_temp = mean(temp)),
    aes(X * 1000, Y * 1000, fill = mean_temp)
  ) +
  # geom_contour(
  #   data = pred_grid_depth, aes(X * 1000, Y * 1000,
  #     z = depth,
  #     #colour = after_stat(level)
  #   ),
  #   bins = 10, alpha = 1, linewidth = 0.2, color = "white"
  # ) +
  labs(tag = "a)") +
  scale_fill_viridis(option = "magma", name = "Temperature (°C)") +
  guides(color = "none") +
  geom_sf() +
  geom_segment(data = skag_kat_border, aes(x = X1*1000, xend = X2*1000,
                                           y = Y1*1000, yend = Y2*1000),
               alpha = 0.75, linetype = 3, color = "white") + 
  geom_text(data = ann_text, aes(x = X*1000, y = Y*1000, label = label),
            color = "white", size = 2.7)
  
p_chlCovMap <- covMapTheme +
  geom_raster(
    data = pred_grid |>
      group_by(X, Y) |>
      summarise(mean_chl = mean(chl)),
    aes(X * 1000, Y * 1000, fill = mean_chl)
  ) +
  labs(tag = "b)") +
  scale_fill_viridis(name = expression("Chl (mg/l"^3 * ")")) +
  theme(
    axis.text.y = element_blank(),
    axis.title.y = element_blank()
  ) +
  # geom_contour(
  #   data = pred_grid_depth, aes(X * 1000, Y * 1000,
  #     z = depth,
  #     #colour = after_stat(level)
  #   ),
  #   bins = 10, alpha = 1, linewidth = 0.2, color = "white"
  # ) +
  guides(color = "none") +
  geom_sf()


# Plot over time
trends <- pred_grid |>
  pivot_longer(c(temp, chl), names_to = "var") |>
  mutate(var = fct_recode(var,
    "Temperature" = "temp",
    "Chlorophyll" = "chl"
  )) |>
  summarise(value = mean(value), .by = c(var, year))

tt <- trends |>
  filter(var == "Temperature") |>
  ggplot(aes(year, value)) +
  geom_point(color = "grey30") +
  geom_smooth(method = "lm", color = "tomato") +
  labs(x = "Year", y = "Temperature (°C)", tag = "c)")

ct <- trends |>
  filter(var == "Chlorophyll") |>
  ggplot(aes(year, value)) +
  geom_point(color = "grey30") +
  geom_smooth(method = "lm", color = "tomato") +
  labs(x = "Year", y = expression("Chl (mg/l"^3 * ")"), tag = "d)")

(p_tempCovMap + p_chlCovMap) / free(tt + ct) +
  plot_layout(heights = c(1, 0.85))

# Save
ggsave(paste0(home, "/figures/covar_map.pdf"), width = 17, height = 14, units = "cm")
```

## Fit models by species

```{r}
  # db |>
  #   mutate(pres = ifelse(no_m2 > 0, 1, 0)) |>
  #   ggplot(aes(X, Y, color = pres)) +
  #   geom_point() +
  #   facet_wrap(~year)
  # hist(db$no_m2)
  # summary(db$no_m2)
  # db |>
  #   ggplot(aes(X, Y, color = no_m2)) +
  #   scale_color_viridis(trans = "sqrt") +
  #   geom_point() +
  #   facet_wrap(~year)
  # dd |>
  #   ggplot(aes(X, Y)) +
  #   geom_point() +
  #   facet_wrap(~year)
```

```{r}
pars_list <- list()
res_list <- list()
res_dens_list <- list()
spatial_list <- list()
spatial_density_list <- list()
range_list <- list()
genq_list <- list()
index_list <- list()
dens_index_list <- list()

for (i in unique(d$species)) {
  print(i)

  dd <- d |> filter(species == i)
  db <- b |> filter(species == i)

  if (unique(dd$species) %in% c(
    "Ammodytidae", "Crystallogobius linearis",
    "Syngnathus rostellatus", "Aphia minuta"
  )) {

    mesh <- make_mesh(dd, xy_cols = c("X", "Y"), cutoff = 8)
    mesh_dens <- make_mesh(db, xy_cols = c("X", "Y"), cutoff = 8)

    ggplot() +
      inlabru::gg(mesh$mesh) +
      coord_fixed() +
      geom_point(aes(X, Y), data = dd, alpha = 0.2, size = 0.5) +
      annotate("text", -Inf, Inf, label = paste("n knots = ", mesh$mesh$n), hjust = -0.1, vjust = 2) +
      labs(x = "Easting (km)", y = "Northing (km)")

    ggsave(paste0(home, paste0("/figures/supp/size_mesh_", i, "_.pdf")), width = 14, height = 14, units = "cm")

    mlength <- sdmTMB(length_mm ~ temp_sc + chl_sc + year_f + yday_ct,
      data = dd,
      mesh = mesh,
      family = gengamma(link = "log"),
      spatiotemporal = "off",
      spatial = "on",
      time = "year")

    mdens <- sdmTMB(no_m2 ~ year_f,
      data = db,
      mesh = mesh_dens,
      family = delta_gamma(type = "poisson-link"),
      spatiotemporal = "iid",
      spatial = "on",
      time = "year")
    
    mlength <- run_extra_optimization(mlength)
  } else {

    mesh <- make_mesh(dd, xy_cols = c("X", "Y"), cutoff = 4)
    mesh_dens <- make_mesh(db, xy_cols = c("X", "Y"), cutoff = 4)
  
    ggplot() +
      inlabru::gg(mesh$mesh) +
      coord_fixed() +
      geom_point(aes(X, Y), data = dd, alpha = 0.2, size = 0.5) +
      annotate("text", -Inf, Inf, label = paste("n knots = ", mesh$mesh$n), hjust = -0.1, vjust = 2) +
      labs(x = "Easting (km)", y = "Northing (km)")

    ggsave(paste0(home, paste("/figures/supp/size_mesh_", i, "_.pdf")), width = 14, height = 14, units = "cm")

    mlength <- sdmTMB(length_mm ~ temp_sc + chl_sc + year_f + yday_ct,
      data = dd,
      mesh = mesh,
      family = gengamma(link = "log"),
      spatiotemporal = "off",
      spatial = "on",
      time = "year")
    
    mlength <- run_extra_optimization(mlength)
    
    mdens <- sdmTMB(no_m2 ~ year_f,
      data = db,
      mesh = mesh_dens,
      family = delta_gamma(type = "poisson-link"),
      spatiotemporal = "iid",
      spatial = "on",
      time = "year")

  }

  print(mlength)
  sanity(mlength)
  
  print(mdens)
  sanity(mdens)
  
  # Residuals
  # For the density model we'll need to use dharma residuals because 2 models (hurdle), so lets do that for length also
  res <- simulate(mlength, nsim = 500, type = "mle-mvn") |>
    dharma_residuals(mlength)
  dd$observed <- res$observed
  dd$expected <- res$expected
  
  res_dens <- simulate(mdens, nsim = 500, type = "mle-mvn") |>
    dharma_residuals(mdens)
  db$observed <- res_dens$observed
  db$expected <- res_dens$expected
  
  res_list[[i]] <- dd
  res_dens_list[[i]] <- db
  
  # Get spatial predictions
  p <- predict(mlength, newdata = pred_grid |>
                 filter(year %in% unique(dd$year_f)))

  # Predict with density model
  pdens <- predict(mdens, 
                   newdata = pred_grid |>
                     filter(year %in% unique(db$year_f))) |> 
    mutate(pred_dens = exp(est1 + est2)) |> 
    dplyr::select(-est_non_rf1, -est_non_rf2, -est_rf2, -est_rf2,
                  -omega_s1, -omega_s2, #-epsilon_st1, -epsilon_st2,
                  -est1, -est2)
  
  spatial_list[[i]] <- p |> mutate(species = i)
  spatial_density_list[[i]] <- pdens |> mutate(species = i)
  
  # Get index - length
  p_ind <- predict(mlength,
    newdata = pdens |> filter(year %in% unique(dd$year)),
    return_tmb_object = TRUE
  )

  ind <- get_index(p_ind,
    area = 1 / nrow(pred_grid |> filter(year == max(year))),
    bias_correct = TRUE
  ) |> 
    mutate(type = "unweighted")
  
  # Get index - density
  p_dens <- predict(mdens, 
                    newdata = pred_grid |>
                      filter(year %in% unique(db$year_f)),
                    return_tmb_object = TRUE) 
  
  d_ind <- get_index(p_dens, area = 9*1e6, bias_correct = TRUE)
  
  dens_index_list[[i]] <- d_ind |> mutate(species = i)
  
  # Weighted index
  weight_sum <- pdens |> 
    summarise(pred_dens_sum = sum(pred_dens), .by = year)
  
  ind_w <- get_index(p_ind,
    area = p_ind$data$pred_dens,
    bias_correct = TRUE
  ) |> 
    left_join(weight_sum) |> 
    mutate(est = est / pred_dens_sum,
           lwr = lwr / pred_dens_sum,
           upr = upr / pred_dens_sum)
  
  ind <- ind |> bind_rows(ind_w |> mutate(type = "weighted"))
  
  index_list[[i]] <- ind |> mutate(species = i)
  
  # Get ranges
  range_length <- tidy(mlength, effects = "ran_pars") |>
    filter(term == "range") |> 
    mutate(cutoff = ifelse(i %in% c(
      "Ammodytidae", "Crystallogobius linearis",
      "Syngnathus rostellatus", "Aphia minuta"
    ),
    8, 4
    )) |> 
    mutate(model = "length")
  
  range_dens <- tidy(mdens, effects = "ran_pars") |>
    filter(term == "range") |> 
    mutate(cutoff = ifelse(i %in% c(
      "Ammodytidae", "Crystallogobius linearis",
      "Syngnathus rostellatus", "Aphia minuta"
    ),
    8, 4
    )) |> 
    mutate(model = "density")

  range <- bind_rows(range_length, range_dens)
  
  # Get gengamma Q and phi
  genq_list[[i]] <- tibble(
    term = "gengamma_Q",
    estimate = mlength$sd_report$par.fixed["gengamma_Q"]
  ) |>
    bind_rows(tidy(mlength, effects = "ran_pars") |> filter(term == "phi")) |>
    mutate(species = i)

  range_list[[i]] <- range |> mutate(species = i)
  
  # Other parameters
  pars_list[[i]] <- tidy(mlength) |> mutate(species = i)
  
}

pars <- bind_rows(pars_list)
res <- bind_rows(res_list)
res_dens <- bind_rows(res_dens_list)
spatial <- bind_rows(spatial_list)
spatial_density <- bind_rows(spatial_density_list)
range <- bind_rows(range_list)
genq <- bind_rows(genq_list)
index <- bind_rows(index_list)
dens_index <- bind_rows(dens_index_list)

write_csv(pars, paste0(home, "/output/pars.csv"))
write_csv(res, paste0(home, "/output/res.csv"))
write_csv(res_dens, paste0(home, "/output/res_dens.csv"))
write_csv(spatial, paste0(home, "/output/spatial.csv"))
write_csv(spatial_density, paste0(home, "/output/spatial_density.csv"))
write_csv(range, paste0(home, "/output/range.csv"))
write_csv(genq, paste0(home, "/output/genq.csv"))
write_csv(index, paste0(home, "/output/index.csv"))
write_csv(dens_index, paste0(home, "/output/dens_index.csv"))
```

```{r}
pars <- read_csv(paste0(home, "/output/pars.csv"))
res <- read_csv(paste0(home, "/output/res.csv"))
res_dens <- read_csv(paste0(home, "/output/res_dens.csv"))
spatial <- read_csv(paste0(home, "/output/spatial.csv"))
spatial_density <- read_csv(paste0(home, "/output/spatial_density.csv"))
range <- read_csv(paste0(home, "/output/range.csv"))
genq <- read_csv(paste0(home, "/output/genq.csv"))
index <- read_csv(paste0(home, "/output/index.csv"))
dens_index <- read_csv(paste0(home, "/output/dens_index.csv"))
```

### Plot residuals and other things

```{r}
# Plot residuals
ggplot(res, aes(observed, expected)) +
  geom_point(color = "grey30", shape = 21, size = 0.5) +
  geom_abline(col = "tomato3", linewidth = 0.6) +
  theme(aspect.ratio = 1) +
  labs(x = "Observed", y = "Expected") +
  facet_wrap(~species, scales = "free")

ggsave(paste0(home, "/figures/supp/residuals.pdf"), width = 20, height = 20, units = "cm")

# Density residuals
ggplot(res_dens, aes(observed, expected)) +
  geom_point(color = "grey30", shape = 21, size = 0.5) +
  geom_abline(col = "tomato3", linewidth = 0.6) +
  theme(aspect.ratio = 1) +
  labs(x = "Observed", y = "Expected") +
  facet_wrap(~species, scales = "free")

ggsave(paste0(home, "/figures/supp/residuals_density.pdf"), width = 20, height = 20, units = "cm")

# Plot range
ggplot(range, aes(estimate, reorder(species, estimate))) +
  geom_point() +
  geom_vline(xintercept = 5, alpha = 0.5, linetype = 2) +
  facet_wrap(~cutoff)

ggplot(range, aes(estimate / cutoff, reorder(species, estimate))) +
  geom_point() +
  geom_vline(xintercept = 2, alpha = 0.5, linetype = 2)

# Plot generalized gamma
# The lognormal occurs as the internal parameter gengamma_Q approaches 0
genq |>
  filter(term == "gengamma_Q") |>
  ggplot(aes(estimate, species)) +
  facet_wrap(~term, ncol = 1) +
  geom_point() +
  geom_vline(xintercept = 0, alpha = 0.5, linetype = 2)

# If Q matches phi the distribution should be the gamma.
genq |>
  ggplot(aes(estimate, species, color = term)) +
  geom_point()
```

### Coefficients

```{r}
#| message: false
#| warning: false

pars_order <- pars |>
  filter(term %in% c("temp_sc")) |>
  arrange(estimate)

labels <- data.frame(
  life_stage = rep(c("Larvae", "Adult"), each = 3),
  term = rep(c("Temperature", "Day of the year", "Chlorophyll"), 2),
  group = c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)")
  )

pars |>
  filter(term %in% c("temp_sc", "chl_sc", "yday_ct")) |>
  mutate(life_stage = ifelse(species %in% c("Ammodytidae", "Syngnathus rostellatus", "Pomatoschistus sp.", 
                                            "Crystallogobius linearis", "Aphia minuta"), 
                             "Adult", "Larvae")) |> 
  mutate(term = fct_recode(term,
    "Day of the year" = "yday_ct",
    "Temperature" = "temp_sc",
    "Chlorophyll" = "chl_sc"
  )) |>
  mutate(
    sign = ifelse(estimate > 0, "pos", "neg"),
    sig = ifelse(estimate > 0 & conf.low > 0, "sig", "not sig"),
    sig = ifelse(estimate < 0 & conf.high < 0, "sig", sig)
  ) |>
  ggplot(aes(estimate, factor(species, levels = pars_order$species), fill = sig, color = sign, shape = sig)) +
  #facet_wrap(~ factor(term, levels = c("Temperature", "Day of the year", "Chlorophyll"))) +
  ggh4x::facet_grid2(factor(life_stage, levels = c("Larvae", "Adult")) ~ factor(term, levels = c("Temperature", "Day of the year", "Chlorophyll")),
                     scales = "free_y") +
  geom_point(fill = NA) +
  scale_shape_manual(values = c(21, 19)) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high),
    width = 0, alpha = 0.3
  ) +
  geom_vline(xintercept = 0, alpha = 0.3, linetype = 2, linewidth = 0.25) +
  theme(axis.text.y = element_text(face = "italic")) +
  labs(y = "Species", x = "Slope") +
  scale_color_brewer(palette = "Dark2", direction = -1) +
  scale_fill_brewer(palette = "Dark2", direction = -1) +
  guides(color = "none", shape = "none") +
  geom_stripped_rows(aes(y = species), inherit.aes = FALSE) +
  geom_text(
    data = labels,
    color = "grey40",
    aes(x = Inf, y = Inf, label = group),
    size = 3,
    inherit.aes = FALSE,
    vjust = 1.5, 
    hjust = 1.5
  ) +
  theme(legend.position = "bottom")

ggsave(paste0(home, "/figures/coefs.pdf"), width = 17, height = 10, units = "cm")
```

## Spatial plots and indices

```{r}
trends <- index |>
  filter(!species == "Sardina pilchardus") |> 
  filter(type == "weighted") |> 
  rename(ind = est, 
         ind_lwr = lwr,
         ind_upr = upr,
         ind_se = se) |> 
  group_by(species) |> 
  nest() |> 
  mutate(
    # Fit models
    model = map(data, ~sdmTMB(
      ind ~ s(year, k = 8),
      family = lognormal(),
      data = .x,
      spatial = "off"
    )),
    # Get predictions with CIs
    preds = map(model, ~predict(.x, se_fit = TRUE) |> 
      mutate(
        lwr = exp(est - 1.96 * est_se),
        upr = exp(est + 1.96 * est_se)
      ))
  ) |> 
  select(species, preds) |> 
  unnest(preds)

ggplot(trends, aes(year, exp(est))) +
  facet_wrap(~species, scales = "free") +
  geom_point(aes(year, ind), alpha = 0.8, color = "steelblue") +
  geom_errorbar(aes(ymin = ind_lwr, ymax = ind_upr), color = "steelblue", width = 0, alpha = 0.5) +
  geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.1) +
  geom_line(color = "tomato", alpha = 0.8) +
  theme(strip.text = element_text(face = "italic")) +
  labs(x = "Year", y = "Length (mm)")

ggsave(paste0(home, "/figures/size_index.pdf"), width = 21, height = 16, units = "cm")

trends |>
  filter(type == "weighted") |> 
  ungroup() |>
  mutate(year2 = ifelse(year == min(year), "min", NA), .by = species) |>
  mutate(year2 = ifelse(year == max(year), "max", year2), .by = species) |>
  filter(year2 %in% c("min", "max")) |>
  dplyr::select(year2, species, est) |>
  pivot_wider(values_from = est, names_from = year2) |>
  mutate(percent = ((`max` - `min`) / abs(`min`)) * 100) |>
  arrange(desc(percent)) |>
  ggplot(aes(percent, reorder(species, percent))) +
  geom_vline(xintercept = 0, alpha = 0.5, linetype = 2) +
  geom_point(color = "steelblue") +
  labs(x = "Percent change", y = "Species") +
  theme(axis.text.y = element_text(face = "italic"))

# ggsave(paste0(home, "/figures/percent_change.pdf"), width = 12, height = 9, units = "cm")

# density index
trends_dens <- dens_index |>
  rename(ind = est, 
         ind_lwr = lwr,
         ind_upr = upr,
         ind_se = se) |> 
  group_by(species) |> 
  nest() |> 
  mutate(
    # Fit models
    model = map(data, ~sdmTMB(
      ind ~ s(year, k = 8),
      family = lognormal(),
      data = .x,
      spatial = "off"
    )),
    # Get predictions with CIs
    preds = map(model, ~predict(.x, se_fit = TRUE) |> 
      mutate(
        lwr = exp(est - 1.96 * est_se),
        upr = exp(est + 1.96 * est_se)
      ))
  ) |> 
  select(species, preds) |> 
  unnest(preds)

ggplot(trends_dens, aes(year, exp(est))) +
  facet_wrap(~species, scales = "free") +
  geom_point(aes(year, ind), alpha = 0.8, color = "steelblue") +
  geom_errorbar(aes(ymin = ind_lwr, ymax = ind_upr), color = "steelblue", width = 0, alpha = 0.5) +
  geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.1) +
  geom_line(color = "tomato", alpha = 0.8) +
  theme(strip.text = element_text(face = "italic")) +
  labs(x = "Year", y = "Relative abundance")

ggsave(paste0(home, "/figures/density_index.pdf"), width = 21, height = 16, units = "cm")

# Length
plot_map_fc +
  geom_raster(
    data = spatial |>
      summarise(est = mean(exp(est)), .by = c(X, Y, species)) |> 
      mutate(est_sc = est / mean(est), .by = species),
    aes(X * 1000, Y * 1000, fill = est_sc)
  ) +
  scale_fill_gradient2(midpoint = 1) +
  facet_wrap(~species) +
  labs(fill = "Scaled size") +
  theme(strip.text = element_text(face = "italic")) + 
  geom_sf()

ggsave(paste0(home, "/figures/spatial_size.pdf"), width = 17, height = 17, units = "cm")

# Density
plot_map_fc +
  geom_raster(
    data = spatial_density |>
      summarise(pred_dens = mean(pred_dens), .by = c(X, Y, species)) |> 
      mutate(est_sc = pred_dens / mean(pred_dens), .by = species),
    aes(X * 1000, Y * 1000, fill = est_sc)
  ) +
  #scale_fill_viridis(trans = "sqrt") +
  scale_fill_gradient2(midpoint = 1, trans = "sqrt") +
  facet_wrap(~species) +
  labs(fill = "Scaled density") +
  theme(strip.text = element_text(face = "italic")) + 
  geom_sf()

ggsave(paste0(home, "/figures/spatial_density.pdf"), width = 17, height = 17, units = "cm")
```

## Percent change in index

```{r}
trends_change <- trends |>
  filter(type == "weighted") |> 
  filter(year >= 2012) |> 
  ungroup() |>
  mutate(year2 = ifelse(year == min(year), "min", NA), .by = species) |>
  mutate(year2 = ifelse(year == max(year), "max", year2), .by = species) |>
  filter(year2 %in% c("min", "max")) |>
  mutate(est = exp(est)) |> 
  dplyr::select(year2, species, est) |>
  pivot_wider(values_from = est, names_from = year2) |>
  mutate(percent = ((`max` - `min`) / abs(`min`)) * 100) |>
  arrange(desc(percent))

trends_change

trends_change |> 
  summarise(mean = mean(percent),
            max = max(percent),
            min = min(percent),
            median = median(percent))

trends_dens_change <- trends_dens |>
  filter(year >= 2012) |> 
  ungroup() |>
  mutate(year2 = ifelse(year == min(year), "min", NA), .by = species) |>
  mutate(year2 = ifelse(year == max(year), "max", year2), .by = species) |>
  filter(year2 %in% c("min", "max")) |>
  mutate(est = exp(est)) |> 
  dplyr::select(year2, species, est) |>
  pivot_wider(values_from = est, names_from = year2) |>
  mutate(percent = ((`max` - `min`) / abs(`min`)) * 100) |>
  arrange(desc(percent)) 

trends_dens_change

trends_dens_change |> 
  summarise(mean = mean(percent),
            max = max(percent),
            min = min(percent),
            median = median(percent))
```

